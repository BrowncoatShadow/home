#!/usr/bin/env bash

# XDG Base Directory Specification
: "${XDG_BIN_HOME:=${HOME}/.local/bin}"
: "${XDG_DATA_HOME:=${HOME}/.local/share}"
: "${XDG_CONFIG_HOME:=${HOME}/.config}"
: "${XDG_CACHE_HOME:=${HOME}/.cache}"

# Default GitHub username to use for packages specified witout a username.
USERNAME="${GITHUB_USERNAME:-BrowncoatShadow}"
# Git protocol used for cloning package repos. Can take SSH or HTTPS.
PROTOCOL="${HOME_PROTOCOL:-SSH}"
# Base directory for all caches.
CACHE_DIR="${XDG_CACHE_HOME}/home"
# Where packages are cached.
PACKAGE_CACHE_DIR="${CACHE_DIR}/packages"
# Where all available package names are cached.
PACKAGE_LIST_FILE="${CACHE_DIR}/packages.list"
# Where binaries are copied.
# Should be somewhere in your PATH.
BIN_DIR="${XDG_BIN_HOME}"
# Where bash files to be sourced are copied.
# Files in this directory should be sourced in something like your ~/.bashrc file.
BASH_DIR="${XDG_CONFIG_HOME}/bash/bashrc.d"
# Where bash completions are copied.
# This is the default behavior for bash-completion and completions in this
# directory are loaded on demand. Completions must match the command name in
# the format of "${cmd}", "${cmd}.bash", or "_${cmd}".
COMP_DIR="${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME}/bash-completion}/completions"

read -r -d '' USAGE <<EOF
A simple, opinionated, personal package manager for your home directory

Usage:
  home (add | rm) <package>...
  home up [<package>...]
  home ls [all] [mine]
EOF

# Recursively copy each file from every directory in source directory to target directory
#   {1} Source directory
#   {2} Target directory
recursive_copy() {
  local source_dir="${1}"
  local target_dir="${2}"
  local source_file target_file source_step_dir target_step_dir

  if [[ -d "${source_dir}" ]]; then
    for source_file in $(find "${source_dir}" -maxdepth 1 -mindepth 1 -type f); do
      target_file="${target_dir}/${source_file##*/}"
      mkdir -p "${target_dir}"
      cp "${source_file}" "${target_dir}"
    done

    for source_step_dir in $(find "${source_dir}" -maxdepth 1 -mindepth 1 -type d); do
      target_step_dir="${target_dir}/${source_step_dir##*/}"
      recursive_copy "${source_step_dir}" "${target_step_dir}"
    done
  fi
}

# Recursively delete each file from every directory in source directory from target directory
#   {1} Source directory
#   {2} Target directory
recursive_delete() {
  local source_dir="${1}"
  local target_dir="${2}"
  local source_file target_file source_step_dir target_step_dir

  if [[ -d "${source_dir}" ]]; then
    for source_file in $(find "${source_dir}" -maxdepth 1 -mindepth 1 -type f); do
      target_file="${target_dir}/${source_file##*/}"
      if [[ -f "${target_file}" ]]; then
        rm -f "${target_file}"
      fi
    done

    for source_step_dir in $(find "${source_dir}" -maxdepth 1 -mindepth 1 -type d); do
      target_step_dir="${target_dir}/${source_step_dir##*/}"
      recursive_delete "${source_step_dir}" "${target_step_dir}"
    done

    rmdir -p "${target_dir}" 2>/dev/null
  fi
}

# Ensure executible bit is set for every file in the target directory that is listed in the source directory
#   {1} Source directory
#   {2} Target directory
ensure_executables() {
  local source_dir="${1}"
  local target_dir="${2}"
  local source_file target_file

  if [[ -d "${source_dir}" ]]; then
    for source_file in $(find "${source_dir}" -maxdepth 1 -mindepth 1 -type f); do
      target_file="${target_dir}/${source_file##*/}"
      if [[ ! -x "${source_file}" ]]; then
        chmod +x "${target_file}"
      fi
    done
  fi
}

# Copy or remove files based on contents of a package directory
#   {1} Package cache
#   {2} Hook name
#   {3} Source directory in pacakge cache
#   {4} Target directory
#   {5} Hook options
# Hook Options
#   h   Files should be marked as hidden with a leading "."
#   x   Files should be marked as executable
package_directory_hook() {
  local hook="${2}"
  local source_dir="${1}/${3}"
  local target_dir="${4}"
  local source_file target_file

  if [[ -d "${source_dir}" ]]; then
      if [[ "${hook}" == "install" ]]; then
        recursive_copy "${source_dir}" "${target_dir}" "."

        if [[ "${3}" == "bin" ]]; then
          ensure_executables "${source_dir}" "${target_dir}"
        fi
      elif [[ "${1}" == "uninstall" ]]; then
        recursive_delete "${source_dir}" "${target_dir}"
      fi
  fi
}

# Check for script hook in `scripts` directory and execute it
#   {1} Package cache
#   {2} Hook name
package_script_hook() {
  if [[ -x "${1}/scripts/${2}" ]]; then
    pushd "${1}" >/dev/null
    "${1}/scripts/${2}"
    popd >/dev/null
  fi
}

# Dispatcher for all package hooks
#   {1} Pacakge cache
#   {2} Hook name
package_hook() {
  package_script_hook "${1}" "${2}"
  package_directory_hook "${1}" "${2}" "bin" "${BIN_DIR}" "x"
  package_directory_hook "${1}" "${2}" "bash" "${BASH_DIR}"
  package_directory_hook "${1}" "${2}" "completions" "${COMP_DIR}"
}

# Find all cached packages then return them in `Username/Repo` format
# Any directory tree two levels deep that is a git repo is considered a package cache
#   [all] List all known packages
#   [mine] List only user's personal packages in short form
list_packages() {
  local package package_list

  if [[ "${1}" == "all" ]]; then
    if [[ -f "${PACKAGE_LIST_FILE}" ]]; then
      package_list=($(<"${PACKAGE_LIST_FILE}"))
      shift
    else
      echo "No package list available, make sure 'hub' and 'jq' are installed then run 'home up'"
      exit 1
    fi
  else
    package_list=()
    for package in $(find "${PACKAGE_CACHE_DIR}" -mindepth 2 -maxdepth 2 -type d); do
      if [[ -d "${package}/.git" ]]; then
        package_list+=("${package#${PACKAGE_CACHE_DIR}/}")
      fi
    done
  fi

  for package in "${package_list[@]}"; do
    if [[ "${1}" == "mine" ]]; then
      if [[ "${package%/*}" == "${USERNAME}" ]]; then
        echo "${package#*/}"
      fi
    else
      echo "${package}"
    fi
  done
}

main() {
  local package_name package_cache package_list
  local action="${1}"
  shift

  if [[ ! "${action}" =~ ^(add|rm|up|ls)$ ]]; then
    echo "${USAGE}"
    exit 0
  fi

  if [[ "${action}" == "ls" ]]; then
    list_packages "${@}"
    exit 0
  fi

  # If hub and jq are installed, update list of packages available from GitHub
  if [[ "${action}" == "up" ]] && type -p hub &>/dev/null && type -p jq &>/dev/null; then
    echo "$(hub api "search/repositories?q=topic:home-package" | jq -r ".items[].full_name")" > "${PACKAGE_LIST_FILE}"
  fi

  # If action is `up` without packages, update all cached packages
  if [[ "${action}" == "up" && -z "${1}" ]]; then
    package_list=($(list_packages))
  fi

  if [[ -z "${package_list}" && -z "${1}" ]]; then
    echo "${action} requires a list of one or more package names"
    exit 1
  fi

  for package_name in "${package_list[@]:-${@}}"; do
    # Parse the the package_name string into "namespace/repo" with default USERNAME
    package_name=(${package_name/\// })
    if [[ ${#package_name[@]} -eq 1 ]]; then
      package_name="${USERNAME}/${package_name[0]}"
    elif [[ ${#package_name[@]} -eq 2 ]]; then
      package_name="${package_name[0]}/${package_name[1]}"
    else
      echo "Unparseable package name: ${package_name[@]}"
      continue
    fi

    package_cache="${PACKAGE_CACHE_DIR}/${package_name}"

    echo "${package_name}"

    if [[ "${action}" == "rm" ]]; then
			# Trigger remove hook, then remove package cache
      package_hook "${package_cache}" "uninstall"
      rm -rf "${package_cache}"
      rmdir -p "${package_cache%/*}" 2>/dev/null

    elif [[ "${action}" == "up" ]]; then
      if [[ -d "${package_cache}" ]]; then
				# Only trigger hooks to update if upstream contains changes
        pushd "${package_cache}" >/dev/null
        git fetch --quiet
        if ! git diff --quiet @ @{u}; then
          package_hook "${package_cache}" "uninstall"
          git pull
          package_hook "${package_cache}" "build"
          package_hook "${package_cache}" "install"
        fi
        popd >/dev/null
      else
        echo "${package_name} is not an installed package"
      fi

    elif [[ "${action}" == "add" ]]; then
      if [[ ! -d "${package_cache}" ]]; then
        if [[ "${PROTOCOL}" =~ ^(https|HTTPS)$ ]]; then
          package_uri="https://github.com/${package_name}.git"
        elif [[ "${PROTOCOL}" =~ ^(ssh|SSH)$ ]]; then
          package_uri="git@github.com:${package_name}.git"
        else
          echo "[fatal] bad protocol: ${PROTOCOL}"
          exit 1
        fi

        git clone "${package_uri}" "${package_cache}"
        package_hook "${package_cache}" "build"
        package_hook "${package_cache}" "install"
      else
        echo "${package_name} is already installed"
      fi
    fi
  done
}
main "${@}"
